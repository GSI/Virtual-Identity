<?xml version="1.0"?>
<!-- ***** BEGIN LICENSE BLOCK *****
   - This program is free software; you can redistribute it and/or modify
   - it under the terms of the GNU General Public License as published by
   - the Free Software Foundation; either version 2 of the License, or
   - (at your option) any later version.

   - This program is distributed in the hope that it will be useful,
   - but WITHOUT ANY WARRANTY; without even the implied warranty of
   - MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   - GNU General Public License for more details.

   - You should have received a copy of the GNU General Public License
   - along with this program; if not, write to the Free Software
   - Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

   - The Original Code is the Virtual Identity Extension.

   - The Initial Developer of the Original Code is Rene Ejury.
   - Portions created by the Initial Developer are Copyright (C) 2007
   - the Initial Developer. All Rights Reserved.

   - Contributor(s):
   - ***** END LICENSE BLOCK ***** -->

<!DOCTYPE overlay [
<!ENTITY % vIdentDTD SYSTEM "chrome://v_identity/locale/v_identity.dtd">
%vIdentDTD;
]>


<bindings id="mailComposeBindings"
          xmlns="http://www.mozilla.org/xbl"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
          xmlns:xbl="http://www.mozilla.org/xbl">
	
	<binding id="tooltipPopupset">
	<implementation>
	<method name="addTooltip">
	<parameter name="elem" />
	<parameter name="permanent" />
        	<body><![CDATA[
		var randID = elem.tooltipElem.getAttribute("tooltip");
		this.removeTooltip(randID);
		if (!randID) {
			randID = "tooltip_" + parseInt((new Date()).getTime());
			elem.tooltipElem.setAttribute("tooltip", randID);
		}
		var toolTip = document.createElement("tooltip");
		toolTip.setAttribute("class", "identityDataTooltip");
		toolTip.setAttribute("id", randID);
		toolTip.elem = elem;
		toolTip.permanent = permanent;
		this.appendChild(toolTip);
		]]></body>
	</method>
	<method name="removeTooltip">
	<parameter name="randID" />
        	<body><![CDATA[
		if (randID) this.removeChild(document.getElementById(randID))
		]]></body>
	</method>
	</implementation>
	</binding>
	
	<binding id="vI_identityDataTooltip" extends="chrome://global/content/bindings/popup.xml#tooltip">
 	<content onpopuphidden="popuphidden();" onpopupshowing="this.popupshowing();this.resize()" onpopupshown="this.resize()" >
			<xul:browser style="overflow:hidden" anonid="tooltipBrowser" class="vI_htmlTextBox" cssSource="vI_TooltipBrowser.css" flex="1" disablehistory="true" onoverflow="document.getBindingParent(this).resize()"/>
			<children />
	</content>
	<implementation>
	<method name="popupshowing">
        	<body><![CDATA[
		if (!this._identityInfo) {
			this._identityInfo = 
				"<table><tr>" +
					"<td class='image'><img src='chrome://v_identity/skin/vi-info.png' /></td>" +
					"<td class='identityTable'>" +
						"<div class='name'>" + this.elem.identityData.combinedNameHtml + "</div>" +	
						"<table><tbody>" + this.elem.identityData.getMatrix() + "</tbody></table>" +
					"</td>" +
				"</tr></table>"
//			vI_notificationBar.dump("** v_identity.xml added tooltip with id='" +  this.elem.identityData.id.key + "'\n")
			this._tooltipBrowser.outputString = this._identityInfo;
		}
		]]></body>
	</method>
	<method name ="popuphidden">
        	<body><![CDATA[	
		if (!this.permanent) this._identityInfo = null;
		]]></body>
	</method>	
	<method name="resize">
		<body><![CDATA[
		if (!this._identityInfo) return;
		var width = document.getElementById("msgIdentity_clone").boxObject.width * 0.7;
		var height = this._tooltipBrowser.contentDocument.lastChild.scrollHeight + 5;
		this.sizeTo(width, height);
		width = document.getElementById("msgIdentity_clone").boxObject.width * 0.75;
		this.sizeTo(width, height);
		]]></body>
	</method>
	<field name="permanent" />
	<field name="elem" />
<!-- 	<field name="identityData">this.elem.identityData</field> -->
	<field name="_identityInfo">false</field>
<!-- 	<field name="_initialized">false</field> -->
	<field name="_tooltipBrowser">document.getAnonymousElementByAttribute(this, "anonid", "tooltipBrowser")</field>
	</implementation>
	</binding>	
	
	<binding id="fromPopupItem_clone" extends="chrome://global/content/bindings/menu.xml#menuitem">
  	<content excludes="template,observes,menupopup">
		<xul:image class="menupopup_clone-icon" xbl:inherits="src"/>
		<xul:label class="menupopup_clone-text" xbl:inherits="value=label,accesskey,crop" crop="right" flex="1"/>
		<xul:label value="&vident.accPane.prettyName.prefix;" class="menupopup_clone-vid virtIdLabel" vid="false" xbl:inherits="vid" crop="right"/>
      		<xul:label class="menupopup_clone-description" xbl:inherits="value=description" crop="right"/>
		<xul:label class="menupopup_clone-smtp" xbl:inherits="value=smtp,style=smtpStyle" crop="right"/>
  	</content>
  	<implementation>
	<constructor>
		<![CDATA[
		this._identityDataStorage = this.identityData;
		
		this.label = this._identityDataStorage.combinedName;
		this.value = this._identityDataStorage.id.key;
		// vI_notificationBar.dump("** v_identity.xml fromPopupItem_clone constructor id='" + this.value + "'.\n")

		this.description = this._identityDataStorage.sideDescription;
		this.smtp = this._identityDataStorage.smtp.value;
		// vI_notificationBar.dump("** v_identity.xml fromPopupItem_clone constructor smtp='" + this.smtp + "'.\n")
		this.smtpStyle = "width:" + document.getElementById("smtp_server_list").clientWidth + "px;";
		this._identityDataStorage.smtp.value;
		
		document.getElementById("vI_tooltipPopupset").addTooltip(this, true);
		]]>
	</constructor>
	<method name="clean">
        	<body><![CDATA[
		document.getElementById("vI_tooltipPopupset")
			.removeTooltip(this.tooltipElem.getAttribute("tooltip"));
		]]></body>
	</method>
	<destructor>
		<![CDATA[
		this.clean();
		]]>
	</destructor>
	<property name="_identityData" onget="return this._identityDataStorage;" />
	<field name="tooltipElem">this</field>
	<property name="vid" onget="return this.getAttribute('vid');" onset="this.setAttribute('vid', val); return val;" />
	<property name="label" onget="return this.getAttribute('label');" onset="this.setAttribute('label', val); return val;" />
	<property name="value" onget="return this.getAttribute('value');" onset="this.setAttribute('value', val); return val;" />
	<property name="description" onget="return this.getAttribute('description');" onset="this.setAttribute('description', val); return val;" />
	<property name="smtp" onget="return this.getAttribute('smtp');" onset="this.setAttribute('smtp', val); return val;" />
	<property name="smtpStyle" onget="return this.getAttribute('smtpStyle');" onset="this.setAttribute('smtpStyle', val); return val;" />
	</implementation>
	</binding>

	<binding id="smtpServerList">
 	<resources>
      		<stylesheet src="chrome://global/skin/menu.css"/>
  	</resources>
 	<content sizetopopup="pref">
		<xul:hbox id="smtpServerHbox" class="smtpServerHbox">
			<xul:menulist class="smtpServerMenuList" anonid="smtpServerMenuList" allowevents="true" id="smtp_server_list">
				<xul:menupopup anonid="smtp_server_list_popup" />
			</xul:menulist>
			<xul:checkbox  id="saveSMTPSwitch" class="vI_plain" allowevents="true" oncommand="event.stopPropagation();vI_statusmenu.changeSMTPStatus(this);" >
				<xul:observes element="vI_statusMenu_storage_saveSMTP" attribute="checked" />
				<xul:observes element="vI_statusMenu_storage_saveSMTP" attribute="disabled" />
			</xul:checkbox>
			<xul:observes element="vI_statusMenu_storage_saveSMTP" attribute="checked" />
			<xul:observes element="vI_statusMenu_storage_saveSMTP" attribute="disabled" />
		</xul:hbox>
	</content>
	<implementation>
	<method name="addNoneServer">
		<body><![CDATA[
		var listitem = document.createElement("menuitem");
		listitem.setAttribute("class", "menuitem-non-iconic");
		listitem.setAttribute("type", "non-iconic-noaccel");
		listitem.setAttribute("label", " ");
		listitem.setAttribute("key", NO_SMTP_TAG);
		this._smtpPopup.insertBefore(listitem, this._smtpPopup.firstChild);
		this._smtpMenu.selectedItem = listitem;
		]]></body>
	</method>
	<method name="_addDefaultServer">
        	<body><![CDATA[
		var listitem = document.createElement("menuitem");
		listitem.setAttribute("class", "menuitem-non-iconic");
		listitem.setAttribute("type", "non-iconic-noaccel");
		listitem.setAttribute("label", document.getElementById("bundle_messenger").getString("defaultServerTag"));
		this._smtpPopup.appendChild(listitem);
		this._smtpMenu.selectedItem = listitem;
		]]></body>
	</method>
	<method name="_addServer">
		<parameter name="server" />
        	<body><![CDATA[
		if (server instanceof Components.interfaces.nsISmtpServer && !server.redirectorType) {
			var listitem = document.createElement("menuitem");
			listitem.setAttribute("class", "menuitem-non-iconic");
			listitem.setAttribute("type", "non-iconic-noaccel");
			listitem.setAttribute("label", (server.description?server.description:server.hostname));
			listitem.setAttribute("key", server.key);
			this._smtpPopup.appendChild(listitem);
		}
		]]></body>
	</method>	
	<constructor>
		<![CDATA[		
		this._addDefaultServer();
		this._smtpPopup.appendChild(document.createElement("menuseparator"));

		var servers = Components.classes["@mozilla.org/messengercompose/smtp;1"]
			.getService(Components.interfaces.nsISmtpService).smtpServers;
		
		if (typeof(servers.Count) == "undefined")		// TB 3.x
			while (servers && servers.hasMoreElements())
				this._addServer(servers.getNext());
		else							// TB 2.x
			for (var i=0 ; i<servers.Count(); i++)
				this._addServer(servers.QueryElementAt(i, Components.interfaces.nsISmtpServer));
		
		]]>
	</constructor>
	<property name="smtp" onget="return this._smtpMenu.selectedItem.getAttribute('key');" >
		<setter><![CDATA[
		if (val == NO_SMTP_TAG) return; // dont overwrite if not set
		vI_notificationBar.dump("** v_identity.xml smtp set to '" + val + "'\n")
		var MenuItems = this._smtpPopup.childNodes
		for (var index = 0; index < MenuItems.length; index++) {
			if (MenuItems[index].localName == "menuseparator") continue;
			if (MenuItems[index].getAttribute("key") == val) {
				this._smtpMenu.selectedItem = MenuItems[index];
				break;
			}
		}
		]]></setter>
	</property>
	<field name="_smtpPopup">document.getAnonymousElementByAttribute(this, "anonid", "smtp_server_list_popup")</field>
	<field name="_smtpMenu">document.getAnonymousElementByAttribute(this, "anonid", "smtpServerMenuList")</field>
	<field name="_smtpService"></field>

	</implementation>
	</binding>
	
	
	
	
	<binding id="fromMenuList_clone" display="xul:menu" extends="chrome://global/content/bindings/menulist.xml#menulist-description">
  	<resources>
      		<stylesheet src="chrome://global/skin/menu.css"/>
		<stylesheet src="chrome://global/skin/autocomplete.css"/>
  	</resources>
  	<content sizetopopup="pref">
		<xul:hbox class="contentHBox" anonid="contentHBox" flex="1"  >
			<xul:hbox id="identityHbox" class="identityHbox" flex="1">
				<xul:vbox><xul:spacer flex="1" />
					<xul:image class="menulist_clone-icon" id="msgIdentity_clone_image" xbl:inherits="src"/>
				<xul:spacer flex="1" /></xul:vbox>
				<xul:vbox flex="1" id="msgIdentity_clone_fromVbox"><xul:spacer flex="1" />
<!-- 					textbox is internally an html:input field which inherits the onblur event.
					Thats why we have to search the textbox before calling blurEvent() -->
					<xul:textbox anonid="textBox" type="search" id="msgIdentity_clonetextBoxElem" class="plain menulist_clone-textbox" allowevents="true" xbl:inherits="value=label,crop,accesskey,nomatch=vid" oncommand="event.stopPropagation(); document.getBindingParent(this).inputEvent();"
					onblur="event.stopPropagation(); var elem = this; while (elem.localName != 'textbox') elem = elem.parentNode; document.getBindingParent(elem).blurEvent();"
					crop="right" highlightnonmatches="true"/>
				<xul:spacer flex="1" /></xul:vbox>
				<xul:vbox id="saveSwitch"><xul:spacer flex="1" />
					<xul:checkbox class="vI_plain" allowevents="true" oncommand="event.stopPropagation();vI_statusmenu.changeSaveStatus(this);" >
						<xul:observes element="vI_statusMenu_storage_save" attribute="checked" />
					</xul:checkbox>
				<xul:spacer flex="1" /></xul:vbox>
				<xul:vbox><xul:spacer flex="1" />
					<xul:hbox>
						<xul:label id="msgIdentity_base_id_label" class="menu_clone-description" xbl:inherits="value,hidden=base_id_key_hidden" crop="right" hidden="true"/>
						<xul:label value="&vident.accPane.prettyName.prefix;" class="menu_clone-vid virtIdLabel" xbl:inherits="vid" crop="right"/>
					</xul:hbox>
				<xul:spacer flex="1" /></xul:vbox>
				<xul:observes element="vI_statusMenu_storage_save" attribute="checked" />
			</xul:hbox>
			<xul:hbox id="baseIDHbox" class="baseIDHbox" >
				<xul:vbox><xul:spacer flex="1" />
					<xul:label id="msgIdentity_clone_label" class="menu_clone-description" xbl:inherits="value=description" crop="right"/>
				<xul:spacer flex="1" /></xul:vbox>
				<xul:vbox id="saveBaseIDSwitch"><xul:spacer flex="1" />
					<xul:checkbox class="vI_plain" allowevents="true" oncommand="event.stopPropagation();vI_statusmenu.changeBaseIDStatus(this);" >
						<xul:observes element="vI_statusMenu_storage_saveBaseID" attribute="checked" />
						<xul:observes element="vI_statusMenu_storage_saveBaseID" attribute="disabled" />
					</xul:checkbox>
				<xul:spacer flex="1" /></xul:vbox>
				<xul:observes element="vI_statusMenu_storage_saveBaseID" attribute="checked" />
				<xul:observes element="vI_statusMenu_storage_saveBaseID" attribute="disabled" />
			</xul:hbox>
			<xul:hbox oncommand="event.stopPropagation();document.getBindingParent(this).smtp = this.smtp" anonid="smtpServerListHbox" class="smtpServerListHbox" />
		</xul:hbox>
		<children />
	</content>
      	<implementation>
	<constructor>
		<![CDATA[		
		var inputTextbox = document.getAnonymousElementByAttribute(this, "class", "plain menulist_clone-textbox");
		
		// check if 'search' textboxes are not implemented change to 'timed'
		if (!inputTextbox.timeout) inputTextbox.setAttribute("type", "timed");
		inputTextbox.setAttribute("timeout", "300")
		
		// to ealy to access vI_tooltipPopupset, this might break the interface
		// it will be done in v_identity.js init
		// document.getElementById("vI_tooltipPopupset").addTooltip(this, false);
		
		this._prefroot.addObserver("extensions.virtualIdentity.show_smtp", this._observer, false);
		this._observer.observe();
		]]>
	</constructor>
	<destructor>
		<![CDATA[
		document.getElementById("vI_tooltipPopupset")
			.removeTooltip(this.tooltipElem.getAttribute("tooltip"));
		this._prefroot.removeObserver("extensions.virtualIdentity.show_smtp", this._observer);
		]]>
	</destructor>

	<!--
	double the Identity-Select Dropdown-Menu to be more flexible with modifying it
	the original Identity Dropdown Menu is hidden and stores the base Identity, on which one
	the Virtual Identity is build upon
	-->
	<method name="command">
		<body><![CDATA[
		vI_notificationBar.dump("\n** v_identity.xml msgIdentityCloneElem.doCommand() \n")
		// copy selected Menu-Value from clone to orig.
		var MenuItems = this._msgIdentityPopupElem.childNodes
		for (var index = 0; index < MenuItems.length; index++) {
			if ( MenuItems[index].getAttribute("value") == this.selectedMenuItem.identityData.id.key ) {
				this._msgIdentityElem.selectedItem = MenuItems[index];
				this._msgIdentityElem.value = MenuItems[index].getAttribute("value");
				break;
			}
		}
		this._msgIdentityPopupElem.doCommand();
		
		this.identityData = this.selectedMenuItem.identityData.getDuplicate();
		
		// if current SMTP is empty, take the one from current Identity
		if (this.identityData.smtp.hasNoDefinedSMTP()) {
			this.identityData.smtp.key = gAccountManager.getIdentity(this.value).smtpServerKey;
			document.getAnonymousElementByAttribute(this, "anonid", "smtpServerListHbox").smtp = this.identityData.smtp.keyNice;
			this.checkForVirtualIdentity();
		}
	]]></body>
	</method>	
	<method name="init">
		<body><![CDATA[
		var MenuItems = this._msgIdentityPopupElem.childNodes
		for (var index = 0; index < MenuItems.length; index++) {
			var identity = gAccountManager.getIdentity(MenuItems[index].getAttribute("value"));
			vI_notificationBar.dump("\n** newIdentity: " + " \n");
			
			var description;
			var server = gAccountManager.GetServersForIdentity(identity).QueryElementAt(0, Components.interfaces.nsIMsgIncomingServer);
			// if (server.type == "nntp")
				description = server.prettyName
			// else description = identity.description?"- "+identity.description:identity.accountname
			
			var newIdentity = new identityData(identity.email, identity.fullName, identity.key,
						identity.smtpServerKey, null, description)
			newIdentity.extras.readIdentityValues(identity);

			var menuItem = this.addIdentityToCloneMenu(newIdentity)

			if (this._msgIdentity_selectedItem == MenuItems[index]) {
				this.selectedItem = menuItem;
				this.identityData = newIdentity.getDuplicate();
			}
		}
		this._popupMenu_separator = true;
		]]></body>
	</method>
	<method name="clean">
		<body><![CDATA[
		var MenuItems = this._popupElem.childNodes;
		while (MenuItems.length > 0) {
			try {MenuItems[0].clean();} catch (e) { };
			this._popupElem.removeChild(MenuItems[0])
		}
		this.selectedItem = null;
		this.identityData = null;
		
		this._menu_separator = null;
		]]></body>
	</method>	
	<method name="addIdentityToCloneMenu">
		<parameter name="localIdentityData" />
		<body><![CDATA[
		var existingItem = this._isExistingCloneMenuItem(localIdentityData);
		if (!existingItem) {
			var MenuItem = document.createElement("menuitem");
		    	MenuItem.identityData = localIdentityData;
			MenuItem.setAttribute("class", "identity_clone-popup-item");
			MenuItem.setAttribute("type", "vIdentity"); // to prevent overriding with menuitem:not([type])
			MenuItem.value = localIdentityData.id.key; // might be accessed before item is constructed

			// set vid explicitely
			if (this._popupMenu_separator) MenuItem.setAttribute("vid", "true");
			else	MenuItem.setAttribute("vid", "false");
						
			this._popupElem.appendChild(MenuItem);
			return MenuItem;
		}
		else return existingItem;
		]]></body>
	</method>
	<method name="addIdentitiesToCloneMenu">
		<parameter name="identityCollection" />
		<body><![CDATA[
		for (var index = 0; index < identityCollection.number; index++)
			identityCollection.menuItems[index] =
				this.addIdentityToCloneMenu(identityCollection.identityDataCollection[index])
		]]></body>
	</method>
	<method name="_getMenuItemForIdentity">
		<parameter name="identitykey" />
		<body><![CDATA[
		var MenuItems = this._popupElem.childNodes;
		for (var index = 0; index < MenuItems.length; index++) {
			if (MenuItems[index].value == identitykey)
				return MenuItems[index]
		}
		return null;
		]]></body>
	</method>
	<property name="_popupMenu_separator" >
		<getter><![CDATA[
			if (this._menu_separator) this._menu_separator.removeAttribute("hidden");
			return this._menu_separator;
		]]></getter>
		<setter><![CDATA[
			if (!val) return;
			// add hidden separator as indicator that now only virtual identities are added
			this._menu_separator = document.createElement("menuseparator");
			this._menu_separator.setAttribute("id", "vid_separator");
			this._menu_separator.setAttribute("hidden", "true");
			this._popupElem.appendChild(this._menu_separator)
		]]></setter>	
	</property>
	<property name="selectedMenuItem" >
		<getter><![CDATA[
			return this.selectedItem;
		]]></getter>
		<setter><![CDATA[
			if (typeof(val) == "object") this.selectedItem = val
			else if (val == "default")
				this.selectedItem = this._getMenuItemForIdentity(gAccountManager.defaultAccount.defaultIdentity.key)
			else this.selectedItem = this._getMenuItemForIdentity(val)
			this.doCommand();
		]]></setter>	
	</property>
	<method name="_isExistingCloneMenuItem">
		<parameter name="localIdentityData" />
		<body><![CDATA[
		var MenuItems = this._popupElem.childNodes
		for (var j = 0; j < MenuItems.length; j++) {
			if (MenuItems[j].localName == "menuseparator") continue;
			if (MenuItems[j].identityData.equals(localIdentityData)) return MenuItems[j];
		}
		return null;
		]]></body>
	</method>
	<field name="_msgIdentityElem">document.getElementById("msgIdentity")</field>
	<field name="_msgIdentityPopupElem">document.getElementById("msgIdentityPopup")</field>
	<property name="_msgIdentity_selectedItem" >
		<getter><![CDATA[
			if (!this._msgIdentityElem.selectedItem) {
				vI_notificationBar.dump("** v_identity.xml: msgIdentityElem.selectedItem not set, using first Menuitem\n");
				this._msgIdentityElem.selectedItem = this._msgIdentityPopupElem.firstChild
				vI_notificationBar.dump("** v_identity.xml: msgIdentityElem.doCommand()\n");
				this._msgIdentityElem.doCommand();
			}
			return this._msgIdentityElem.selectedItem;
		]]></getter>
	</property>	
	<method name="blurEvent">
        	<body><![CDATA[
		vI_notificationBar.dump("\n** v_identity.xml blurEvent")
		this.inputEvent(); // timeout might prevent inputEvent to fire before blurEvent
		
		this.label = this.identityData.combinedName; // add "<" and ">" to email if required
		this.setAttribute("label", this.label);
		]]></body>
	</method>
	<method name="inputEvent">
        	<body><![CDATA[		
		vI_notificationBar.dump("\n** v_identity.xml inputEvent\n")
		
		this.identityData.combinedName = this.label;
		
		var existingIdentity = this.checkForVirtualIdentity();
		if (existingIdentity) this.selectedMenuItem = existingIdentity;
		]]></body>
	</method>
	<method name="checkForVirtualIdentity">
		<body><![CDATA[
		vI_notificationBar.dump("** v_identity.xml checkForVirtualIdentity: " + this.identityData.id.key + " '" + this.identityData.id.value + "'\n")
		var existingIdentity = this.identityData.isExistingIdentity(false);
		
		this.vid = (!existingIdentity);
		
		vI_msgIdentityCloneTools.signatureSwitch(existingIdentity);
		
		return existingIdentity;
		]]></body>
	</method>
	<property name="smtp" onget="return this.identityData.smtp.key;" > // used to detect changes from SMTP-Menu
		<setter><![CDATA[
		this.identityData.smtp.key = val;
		
		document.getElementById("vI_tooltipPopupset").addTooltip(this);

		var existingIdentity = this.checkForVirtualIdentity();
		if (existingIdentity) this.selectedMenuItem = existingIdentity;
		]]></setter>
	</property>
	<property name="identityData">
		<getter><![CDATA[
		this._identityDataStorage.extras.readValues(); // update with current data
		return this._identityDataStorage;
		]]></getter>
		<setter><![CDATA[
		vI_notificationBar.dump("** v_identity.xml identityData setter\n")
		if (!val) this._identityDataStorage = null
		else {
			var oldIdentityData = this._identityDataStorage;
			this._identityDataStorage = val;
			
			if (oldIdentityData) { // indicates that it's not first time after clean
				if (!this._identityDataStorage.id.key) {
					this._identityDataStorage.id.key = oldIdentityData.id.key;
					var idName = this._identityDataStorage.id.value;
					this._identityDataStorage.sideDescription = (idName)?" - "+idName:"";
					vI_notificationBar.dump("** v_identity.xml set new Id: " + this._identityDataStorage.id.key + " '" + this._identityDataStorage.id.value + "'\n")
				}
				this._identityDataStorage.extras.setValues();
			
				this.checkForVirtualIdentity();
			}
			else	this.vid = false;		// first time after clean it's always a real identity
			
			this.label = this._identityDataStorage.combinedName;
			this.value = this._identityDataStorage.id.key;
			vI_notificationBar.dump("** v_identity.xml identityData setter value='" + this.value + "'\n")
			this.description = this._identityDataStorage.sideDescription;
			vI_notificationBar.dump("** v_identity.xml identityData setter smtp='" + this._identityDataStorage.smtp.keyNice + "'\n")
			document.getAnonymousElementByAttribute(this, "anonid", "smtpServerListHbox").smtp = this._identityDataStorage.smtp.keyNice;
			
		}
		// vI_notificationBar.dump("** v_identity.xml identityData setter done.'\n")
		]]></setter>
	</property>
	<field name="_popupElem">document.getElementById("msgIdentityPopup_clone")</field>
	<field name="tooltipElem">document.getAnonymousElementByAttribute(this, "anonid", "contentHBox")</field>
	<field name="textBoxElem">document.getAnonymousElementByAttribute(this, "anonid", "textBox");</field>
	<field name="_prefroot">Components.classes["@mozilla.org/preferences-service;1"]
		.getService(Components.interfaces.nsIPrefService)
		.getBranch(null).QueryInterface(Components.interfaces.nsIPrefBranch2)</field>
	<field name="_observer"><![CDATA[({
		_self: this,
	        observe: function(aSubject, aTopic, aPrefName) {
			if (this._self._prefroot)
				this._self.showSmtp = 
				this._self._prefroot.getBoolPref("extensions.virtualIdentity.show_smtp");
				var MenuItems = this._self._popupElem.childNodes;
				for (var j = 0; j < MenuItems.length; j++) {
					if (MenuItems[j].localName == "menuseparator") continue;
					MenuItems[j].smtpStyle = "width:" + document.getElementById("smtp_server_list").clientWidth + "px;";
				}
		}
      	})]]></field>
	<property name="email" onset="this.identityData.email = val; this.label = this.identityData.combinedName; this.inputEvent()" />
	<property name="vid" onget="return (this.getAttribute('vid') == 'true');" onset="this.setAttribute('vid',val?'true':'false'); return val;" />
	<property name="label" onget="return this.textBoxElem.value;" onset="this.textBoxElem.value = val; return val;" />
	<property name="value" onget="return this.getAttribute('value');" onset="this.setAttribute('value', val); return val;" />
	<property name="extras" onget="return this.identityData.extras;" />
	<property name="description" onget="return this.getAttribute('description');" onset="this.setAttribute('description', val); return val;" />
	<property name="showSmtp" onget="return (this.getAttribute('showSmtp') == 'true');" onset="this.setAttribute('showSmtp',val?'true':'false'); return val;" />
	</implementation>
	</binding>
</bindings>
